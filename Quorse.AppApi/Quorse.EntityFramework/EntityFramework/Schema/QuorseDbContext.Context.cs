//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Quorse.EntityFramework.EntityFramework.Schema
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuorseDbEntities : DbContext
    {
        public QuorseDbEntities()
            : base("name=QuorseDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<authorisedProvider> authorisedProviders { get; set; }
        public virtual DbSet<backendlog> backendlogs { get; set; }
        public virtual DbSet<batchappStatu> batchappStatus { get; set; }
        public virtual DbSet<billing> billings { get; set; }
        public virtual DbSet<bookingtyperef> bookingtyperefs { get; set; }
        public virtual DbSet<campaign> campaigns { get; set; }
        public virtual DbSet<classcampaign> classcampaigns { get; set; }
        public virtual DbSet<classDate> classDates { get; set; }
        public virtual DbSet<classDetail> classDetails { get; set; }
        public virtual DbSet<classDetails_history> classDetails_history { get; set; }
        public virtual DbSet<classParticipant> classParticipants { get; set; }
        public virtual DbSet<classPromoCode> classPromoCodes { get; set; }
        public virtual DbSet<classRebate> classRebates { get; set; }
        public virtual DbSet<classRef> classRefs { get; set; }
        public virtual DbSet<classRevshare> classRevshares { get; set; }
        public virtual DbSet<classRewardsAllocation> classRewardsAllocations { get; set; }
        public virtual DbSet<classTrainer> classTrainers { get; set; }
        public virtual DbSet<classVenue> classVenues { get; set; }
        public virtual DbSet<cost> costs { get; set; }
        public virtual DbSet<costItem> costItems { get; set; }
        public virtual DbSet<costRef> costRefs { get; set; }
        public virtual DbSet<costType> costTypes { get; set; }
        public virtual DbSet<course> courses { get; set; }
        public virtual DbSet<course_old> course_old { get; set; }
        public virtual DbSet<courseAdditionalInfo> courseAdditionalInfoes { get; set; }
        public virtual DbSet<courseanalytic> courseanalytics { get; set; }
        public virtual DbSet<courseCategory> courseCategories { get; set; }
        public virtual DbSet<courseFeatured> courseFeatureds { get; set; }
        public virtual DbSet<courseFeaturedHistory> courseFeaturedHistories { get; set; }
        public virtual DbSet<courseFeaturedPosition> courseFeaturedPositions { get; set; }
        public virtual DbSet<courseInfo> courseInfoes { get; set; }
        public virtual DbSet<courseInfoTypeRef> courseInfoTypeRefs { get; set; }
        public virtual DbSet<courseLevel1> courseLevel1 { get; set; }
        public virtual DbSet<courseLevel2> courseLevel2 { get; set; }
        public virtual DbSet<courseLevel3> courseLevel3 { get; set; }
        public virtual DbSet<courseLevel4> courseLevel4 { get; set; }
        public virtual DbSet<courseLevel5> courseLevel5 { get; set; }
        public virtual DbSet<courseLevel6> courseLevel6 { get; set; }
        public virtual DbSet<coursePrincipal> coursePrincipals { get; set; }
        public virtual DbSet<courseProduct> courseProducts { get; set; }
        public virtual DbSet<courseStatusRef> courseStatusRefs { get; set; }
        public virtual DbSet<courseTag> courseTags { get; set; }
        public virtual DbSet<courseTrainer> courseTrainers { get; set; }
        public virtual DbSet<courseType> courseTypes { get; set; }
        public virtual DbSet<currency> currencies { get; set; }
        public virtual DbSet<DashboardEnquiry> DashboardEnquiries { get; set; }
        public virtual DbSet<defaultseo> defaultseos { get; set; }
        public virtual DbSet<docRef> docRefs { get; set; }
        public virtual DbSet<enquiry> enquiries { get; set; }
        public virtual DbSet<enquiryCategoryRef> enquiryCategoryRefs { get; set; }
        public virtual DbSet<enquiryHistory> enquiryHistories { get; set; }
        public virtual DbSet<enquiryStatusRef> enquiryStatusRefs { get; set; }
        public virtual DbSet<enrollenquiry> enrollenquiries { get; set; }
        public virtual DbSet<enrollenquiryHistory> enrollenquiryHistories { get; set; }
        public virtual DbSet<entity> entities { get; set; }
        public virtual DbSet<entityTypeRef> entityTypeRefs { get; set; }
        public virtual DbSet<exam> exams { get; set; }
        public virtual DbSet<grantProgram> grantPrograms { get; set; }
        public virtual DbSet<hrdfClaim> hrdfClaims { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<logtypeRef> logtypeRefs { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<paymentRef> paymentRefs { get; set; }
        public virtual DbSet<PaymentTransaction> PaymentTransactions { get; set; }
        public virtual DbSet<pointsRef> pointsRefs { get; set; }
        public virtual DbSet<privatebook> privatebooks { get; set; }
        public virtual DbSet<privateBookHistory> privateBookHistories { get; set; }
        public virtual DbSet<ProductOrder> ProductOrders { get; set; }
        public virtual DbSet<quotation> quotations { get; set; }
        public virtual DbSet<rewardsTypeRef> rewardsTypeRefs { get; set; }
        public virtual DbSet<room> rooms { get; set; }
        public virtual DbSet<statusRef> statusRefs { get; set; }
        public virtual DbSet<subscription> subscriptions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<ticketdetail> ticketdetails { get; set; }
        public virtual DbSet<ticket> tickets { get; set; }
        public virtual DbSet<ticketsHistory> ticketsHistories { get; set; }
        public virtual DbSet<ticketstatu> ticketstatus { get; set; }
        public virtual DbSet<ticketTypeRef> ticketTypeRefs { get; set; }
        public virtual DbSet<trainerEvaluation> trainerEvaluations { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<useranalytic> useranalytics { get; set; }
        public virtual DbSet<userCourseEval> userCourseEvals { get; set; }
        public virtual DbSet<userCourseReq> userCourseReqs { get; set; }
        public virtual DbSet<userDashboard> userDashboards { get; set; }
        public virtual DbSet<userDashboardLink> userDashboardLinks { get; set; }
        public virtual DbSet<userDashboardRef> userDashboardRefs { get; set; }
        public virtual DbSet<userDoc> userDocs { get; set; }
        public virtual DbSet<userFav> userFavs { get; set; }
        public virtual DbSet<userlink> userlinks { get; set; }
        public virtual DbSet<userRef> userRefs { get; set; }
        public virtual DbSet<userStatusRef> userStatusRefs { get; set; }
        public virtual DbSet<userTrainerEval> userTrainerEvals { get; set; }
        public virtual DbSet<venue> venues { get; set; }
        public virtual DbSet<classDetails_bak> classDetails_bak { get; set; }
        public virtual DbSet<course1> course1 { get; set; }
        public virtual DbSet<creditterm> creditterms { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
